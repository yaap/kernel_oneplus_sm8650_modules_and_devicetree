/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Copyright (C) 2012 Google, Inc.
 */

#ifndef _OPLUS_BINDER_SCHED_H_
#define _OPLUS_BINDER_SCHED_H_

#include <linux/sched.h>
#include <uapi/linux/android/binder.h>

#define SET_ASYNC_UX_ENABLE				0x45555801
#define ASYNC_UX_ENABLE_DATA_SIZE		4
#define OBS_NOT_ASYNC_UX_VALUE			0xfffffffffffffff1	//(unsigned long - MAX_ERRNO - ...)

#define CHECK_T_VENDORDATA_OCCUPIED		0xF		/* BIT(0)  | BIT(1) | BIT(2) | BIT(3) */
#define T_SYNC_UX_MASK					0x300	/* (BIT(8) | BIT(9)) */
#define T_NOT_SYNC_UX					0
#define T_IS_SYNC_UX					0x100	/* BIT(8) */

#define CURRENT_TASK_PID				-1
#define SYSTEM_SERVER_NAME              "system_server"
#define BD_FEATURE_MASK                 0xffffffff
extern unsigned int g_sched_enable;

#define BINDER_NAME                     "binder"
#define MAX_SYSTEM_SERVER_DESC          10048
#define SYSTEM_SERVER_UID               1000

enum OBS_STATUS {
	 OBS_INVALID,
	 OBS_VALID,
	 OBS_NOT_ASYNC_UX,
};

#define INVALID_VALUE           -1
#define MAX_UX_IN_LIST			20
#define MAX_ACCUMULATED_UX		2

#define BD_INHERIT_UX_ENABLE            (1 << 16)
#define BD_INHERIT_ASYNC_UX_ENABLE      (1 << 17)
#define BD_BINDER_REF_OPT_ENABLE        (1 << 18)

enum ASYNC_UX_TEST_ITEM {
	 ASYNC_UX_TEST_DISABLE,
	 ASYNC_UX_RANDOM_LOW_INSERT_TEST,
	 ASYNC_UX_RANDOM_HIGH_INSERT_TEST,
	 ASYNC_UX_RANDOM_LOW_ENQUEUE_TEST,
	 ASYNC_UX_RANDOM_HIGH_ENQUEUE_TEST,
	 ASYNC_UX_INORDER_TEST,
};

enum ASYNC_UX_ENABLE_ITEM {
	ASYNC_UX_DISABLE,
	ASYNC_UX_ENABLE_ENQUEUE,
	ASYNC_UX_ENABLE_INSERT_QUEUE,
	ASYNC_UX_ENABLE_MAX,
};

enum BINDER_THREAD_MODE {
	THREAD_MODE_UNKNOWN,
	THREAD_MODE_SYNC,
	THREAD_MODE_ASYNC,
};

enum BINDER_UNSET_TYPE {
	ASYNC_UNSET,
	SYNC_UNSET,
	SYNC_OR_ASYNC_UNSET,
};

enum {
	LOG_BINDER_SYSTRACE_LVL0	= 1U << 0,
	LOG_BINDER_SYSTRACE_LVL1	= 1U << 1,
	LOG_BINDER_SYSTRACE_STATUS	= 1U << 2,
	LOG_SET_ASYNC_UX	= 1U << 3,
	LOG_TRACK_ASYNC_UX	= 1U << 4,
	LOG_SET_SYNC_UX		= 1U << 5,
	LOG_GET_LAST_ASYNC	= 1U << 6,
	LOG_TRACK_LAST_ASYNC	= 1U << 7,
	LOG_SET_ASYNC_AFTER_PENDING	= 1U << 8,
	LOG_SET_SF_UX	= 1U << 9,
};

enum {
	STATE_BINDER_UX_NONE = 0,
	STATE_SYNC_UNSET_UX = 1,
	STATE_SYNC_RT_NOT_SET = 2,
	STATE_SYNC_TYPE_UNEXPECTED = 3,
	STATE_SYNC_NOT_SET = 4,
	STATE_ASYNC_UNSET_UX = 5,
	STATE_ASYNC_NOT_SET_LAST_UX = 6,
	STATE_NO_BINDER_THREAD = 7,
	STATE_ASYNC_NO_THREAD_NO_PENDING = 8,
	STATE_SYNC_INSERT_QUEUE = 9,
	STATE_ASYNC_INSERT_QUEUE = 10,
	STATE_SYNC_RT_NOT_SET_SERVICEMG = 11,
	STATE_SYNC_T_NOT_UNSET_UX = 12,
	STATE_SET_T_VENDORDATA = 13,
	STATE_UNSET_T_VENDORDATA = 14,
	STATE_SYNC_OR_ASYNC_UNSET_UX = 15,
	STATE_SF_ASYNC_IS_UX = 16,
	STATE_THREAD_WAS_ASYNC_UX = 17,
	STATE_ASYNC_HAS_THREAD = 18,
	STATE_SYNC_SET_UX = 50,
	STATE_SYNC_RESET_UX = 51,
	STATE_SYNC_RT_SET_UX = 52,
	STATE_ASYNC_SET_UX = 53,
	STATE_ASYNC_SET_LAST_UX = 54,
	STATE_ASYNC_SET_UX_AFTER_NO_THREAD = 55,
	STATE_SYNC_SET_UX_AGAIN_SERVICEMG = 56,
	STATE_SYNC_RESET_UX_SERVICEMG = 57,
};

enum {
	NUM_INSERT_ID1,
	NUM_INSERT_ID2,
	NUM_INSERT_MAX,
};

struct oplus_binder_struct {
	int async_ux_enable;
	bool pending_async;
	bool async_ux_no_thread;
};

static inline void oplus_bd_feat_enable(unsigned int bd_feat, bool enable)
{
	bd_feat &= BD_FEATURE_MASK;
	if (enable)
		g_sched_enable = !!(bd_feat);
	else
		g_sched_enable = !!(~bd_feat);
}

#endif /* _OPLUS_BINDER_SCHED_H_ */
